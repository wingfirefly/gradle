import org.gradle.build.BuildReceipt
import org.gradle.gradlebuild.BuildEnvironment
import org.gradle.internal.os.OperatingSystem

if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Invocation tasks: $gradle.startParameter.taskNames\nInvocation properties: $gradle.startParameter.projectProperties"
}

ext.milestoneNumber = project.hasProperty("milestoneNumber") ? project.milestoneNumber.toInteger() : null
ext.rcNumber = project.hasProperty("rcNumber") ? project.rcNumber.toInteger() : null
ext.finalRelease = project.hasProperty("finalRelease")
ext.versionQualifier = project.hasProperty("versionQualifier") ? project.versionQualifier: null
if ((milestoneNumber != null && rcNumber != null) ||
    (rcNumber != null && finalRelease) ||
    (milestoneNumber != null && finalRelease)) {
    throw new InvalidUserDataException("Cannot set any combination of milestoneNumber, rcNumber and finalRelease at the same time")
}

ext.baseVersion = rootProject.file("version.txt").text.trim()

File incomingBuildReceiptDir = file("incoming-distributions")
if (!project.hasProperty("ignoreIncomingBuildReceipt") && new File(incomingBuildReceiptDir, BuildReceipt.BUILD_RECEIPT_FILE_NAME).exists()) {
    def incomingDistributionsBuildReceipt = BuildReceipt.readBuildReceipt(incomingBuildReceiptDir)
    ext.buildTimestamp = incomingDistributionsBuildReceipt.buildTimestamp
    println "Using timestamp from incoming build receipt: $buildTimestamp"
} else {
    def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmssZ')
    timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
    Date buildTime
    if (project.hasProperty("buildTimestamp")) {
        buildTime = timestampFormat.parse(buildTimestamp)
    } else {
        if (BuildEnvironment.isCiServer || ['install', 'installAll'].collectMany { [':' + it, it]}.any { gradle.startParameter.taskNames.contains(it) }) {
            buildTime = new Date()
        } else {
            def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
            Date dateWithoutTime = sdf.parse(sdf.format(new Date()))
            buildTime = dateWithoutTime
        }
    }
    ext.buildTimestamp = timestampFormat.format(buildTime)
}

def determineCommitId = tasks.register("determineCommitId") {
    ext.commitId = null

    doLast {
        def strategies = []

        def env = System.getenv()

        // For promotion builds use the commitId passed in as a project property
        strategies << {
            project.hasProperty('promotionCommitId') ? project.property('promotionCommitId') : null
        }

        // Builds of Gradle happening on the CI server
        strategies << {
            env["BUILD_VCS_NUMBER"]
        }

        // For the discovery builds, this points to the Gradle revision
        strategies << {
            env.find { it.key.startsWith("BUILD_VCS_NUMBER_Gradle_Master") }?.value
        }

        // For the discovery release builds, this points to the Gradle revision
        strategies << {
            env.find { it.key.startsWith("BUILD_VCS_NUMBER_Gradle_release_branch") }?.value
        }

        // If it's a checkout, ask Git for it
        strategies << {
            def gitDir = file("${rootDir}/.git")
            if (gitDir.exists()) {
                def baos = new ByteArrayOutputStream()
                def execResult = exec {
                    workingDir = rootDir
                    ignoreExitValue = true
                    commandLine = ["git", "log", "-1", "--format=%H"]
                    if (OperatingSystem.current().windows) {
                        commandLine = ["cmd", "/c"] + commandLine
                    }

                    standardOutput = baos
                }
                if (execResult.exitValue == 0) {
                    new String(baos.toByteArray(), "utf8").trim()
                } else if (file("${gitDir}/HEAD").exists()) {
                    // Read commit id directly from filesystem
                    def headRef = file("${gitDir}/HEAD").text
                    headRef = headRef.replaceAll('ref: ', '').trim()
                    file("${gitDir}/$headRef").text.trim()
                }
            } else {
                null
            }
        }

        // It's a source distribution, we don't know.
        strategies << {
            "<unknown>"
        }

        for (strategy in strategies) {
            commitId = strategy()
            if (commitId) {
                break
            }
        }
    }
}

def configureBuildReceipt = tasks.register("configureBuildReceipt") {
    dependsOn determineCommitId
    doLast {
        createBuildReceipt.versionNumber = rootProject.version
        createBuildReceipt.baseVersion = rootProject.baseVersion
        createBuildReceipt.snapshot = rootProject.isSnapshot
        createBuildReceipt.buildTimestamp = rootProject.buildTimestamp
        createBuildReceipt.commitId = determineCommitId.get().commitId
    }
}

tasks.register("createBuildReceipt", org.gradle.build.BuildReceipt) {
    dependsOn configureBuildReceipt
    destinationDir = file("${rootProject.buildDir}")
}

ext.buildReceiptPackage = '/org/gradle/'

version = baseVersion

ext.isSnapshot = false
if (finalRelease) {
    // use version base
} else if (rcNumber != null) {
    version += "-rc-$rcNumber"
} else if (milestoneNumber != null) {
    version += "-milestone-$milestoneNumber"
} else if (versionQualifier != null ) {
    isSnapshot = true
    version += "-$versionQualifier-$buildTimestamp"
} else {
    isSnapshot = true
    version += "-$buildTimestamp"
}

if (buildTypes.promotionBuild.active) {
    logger.lifecycle "Version: $version (base version: $baseVersion, timestamp: $buildTimestamp, snapshot: $isSnapshot)"
    if (BuildEnvironment.isCiServer) {
        logger.lifecycle "##teamcity[buildStatus text='{build.status.text}, Promoted version ${version}']"
    }
}
